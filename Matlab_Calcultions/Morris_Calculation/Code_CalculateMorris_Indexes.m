clear

%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Simulation Results\Clima_GitHub\Matlab Calculations\Filesforprograms\Results_AllClimates.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/03/28 09:40:05

%% Initialize variables.
filename = 'Input_Results_AllClimates.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column27: double (%f)
%	column28: double (%f)
%   column37: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%f%f%*q%*q%*q%*q%*q%*q%*q%*q%f%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
Res_AN_Pk_Area = [dataArray{1:end-1}];

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

AnnualAll=abs(Res_AN_Pk_Area(:,1)./Res_AN_Pk_Area(:,3));
PeakAll=abs(Res_AN_Pk_Area(:,2)./Res_AN_Pk_Area(:,3));

Annual(:,1)=AnnualAll(1:595,:);
Annual(:,2)=AnnualAll(596:1190,:);
Annual(:,3)=AnnualAll(1191:1785,:);
Annual(:,4)=AnnualAll(1786:2380,:);
Annual(:,5)=AnnualAll(2381:2975,:);
% 
% %All Peak Results per column
Peak(:,1)=PeakAll(1:595,:);
Peak(:,2)=PeakAll(596:1190,:);
Peak(:,3)=PeakAll(1191:1785,:);
Peak(:,4)=PeakAll(1786:2380,:);
Peak(:,5)=PeakAll(2381:2975,:);

save('Output_Simulation_Result.mat','Annual','Peak')

%Collect Annual Energy Demand and Peak Demand for all Climate Simulations

%load('Output_Simulation_Result.mat')
%CLIMATE C5 - Control
An_Max=max(Annual(:,1));
An_Min=min(Annual(:,1));
An_Mean=mean(Annual(:,1));

Pk_Max=max(Peak(:,1));
Pk_Min=min(Peak(:,1));
Pk_Mean=mean(Peak(:,1));

Header=["Max.","Mean","Min."]';
Annual_kWh_sqm=[An_Max,An_Mean,An_Min]';
Peak_W_sqm=[Pk_Max,Pk_Mean,Pk_Min]';
Table_Clim_5=table(Header,Annual_kWh_sqm,Peak_W_sqm);

%CLIMATE C4 - 2080 a1f1 10%
An_Max=max(Annual(:,2));
An_Min=min(Annual(:,2));
An_Mean=mean(Annual(:,2));

Pk_Max=max(Peak(:,2));
Pk_Min=min(Peak(:,2));
Pk_Mean=mean(Peak(:,2));

Annual_kWh_sqm=[An_Max,An_Mean,An_Min]';
Peak_W_sqm=[Pk_Max,Pk_Mean,Pk_Min]';
Table_Clim_4=table(Header,Annual_kWh_sqm,Peak_W_sqm);

%CLIMATE C3 - 2080 a1f1 50%
An_Max=max(Annual(:,3));
An_Min=min(Annual(:,3));
An_Mean=mean(Annual(:,3));

Pk_Max=max(Peak(:,3));
Pk_Min=min(Peak(:,3));
Pk_Mean=mean(Peak(:,3));

Annual_kWh_sqm=[An_Max,An_Mean,An_Min]';
Peak_W_sqm=[Pk_Max,Pk_Mean,Pk_Min]';
Table_Clim_3=table(Header,Annual_kWh_sqm,Peak_W_sqm);

%CLIMATE C2 - 2080 a1b1 90%
An_Max=max(Annual(:,4));
An_Min=min(Annual(:,4));
An_Mean=mean(Annual(:,4));

Pk_Max=max(Peak(:,4));
Pk_Min=min(Peak(:,4));
Pk_Mean=mean(Peak(:,4));

Annual_kWh_sqm=[An_Max,An_Mean,An_Min]';
Peak_W_sqm=[Pk_Max,Pk_Mean,Pk_Min]';
Table_Clim_2=table(Header,Annual_kWh_sqm,Peak_W_sqm);


%CLIMATE C1 - 2080 a1b1 90%
An_Max=max(Annual(:,5));
An_Min=min(Annual(:,5));
An_Mean=mean(Annual(:,5));

Pk_Max=max(Peak(:,5));
Pk_Min=min(Peak(:,5));
Pk_Mean=mean(Peak(:,5));

Annual_kWh_sqm=[An_Max,An_Mean,An_Min]';
Peak_W_sqm=[Pk_Max,Pk_Mean,Pk_Min]';
Table_Clim_1=table(Header,Annual_kWh_sqm,Peak_W_sqm);


%Store the simulation results summary by climate
save('Output_Summary_Results.mat','Table_Clim_1','Table_Clim_2','Table_Clim_3','Table_Clim_4','Table_Clim_5')


%load('Output_Simulation_Result.mat');

%Load the Morris Effect method parameters, and factors changed in each
%iteration)
load('Input_Simulation_Parameter.mat');


i=k+1; %Number of factors + 1

V=p/(2*(p-1));


for n3=1:5 %Number of different samples
for n1=1:r    %Number of trajectories
     for n2=1:i-1   %Number of Factors
        in=OutFact((n1-1)*i+n2);  %Factor varied
        %DT1=Outmatrix((n1-1)*i+n2+1,in);  %Input posterior
        %DT0=Outmatrix((n1-1)*i+n2,in); %Input antecessor
        EnDelta=Annual((n1-1)*i+n2+1,n3)-Annual((n1-1)*i+n2,n3);
        PeakDelta=Peak((n1-1)*i+n2+1,n3)-Peak((n1-1)*i+n2,n3);
        
        EE_En(n1,in,n3)=EnDelta/V;  %Variance
        EE_Peak(n1,in,n3)=PeakDelta/V;  %Variance
     end 
end
        
end




%sigma=sqrt(
for n3=1:5  
    for n2=1:i-1   
u_En(n3,n2)=sum(abs(EE_En(:,n2,n3)))/r;   %Calculate u*
u_Peak(n3,n2)=sum(abs(EE_Peak(:,n2,n3)))/r;   %Calculate u*

sigma_En(n3,n2)=sqrt(sum((EE_En(:,n2,n3)-u_En(n3,n2)).^2)/(r-1));  %Calculate sigmas
sigma_Peak(n3,n2)=sqrt(sum((EE_Peak(:,n2,n3)-u_Peak(n3,n2)).^2)/(r-1));  %Calculate sigmas
      
    end
end

[x1En,xiEn]=sort(u_En,2,'descend'); %Descend order Annual
[x1P,xiP]=sort(u_Peak,2,'descend'); %Descend order Peak

RCP=u_Peak(5,:)./u_Peak(1,:)-1;
RCEn=u_En(5,:)./u_En(1,:)-1;


%Store Results of sensitivity metrics
save('Output_Morris_Metrics_Result.mat','sigma_En','u_En','sigma_Peak','u_Peak','x1En','xiEn','x1P','xiP')


